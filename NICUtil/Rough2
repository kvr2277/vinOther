Read lines 30 - 48 first.

All you do is check entire code in:
https://github.com/kvr2277/vinxplore/tree/master/NICUtil/src/main/java/com/vinJersey

This is the client class - which calls the Restful service
https://github.com/kvr2277/vinxplore/blob/master/NICUtil/src/main/java/com/vinJersey/client/JerseyClientGet.java

This is the service class
https://github.com/kvr2277/vinxplore/blob/master/NICUtil/src/main/java/com/vinJersey/rest/JSONService.java

In client u call :
http://localhost:9280/NICUtil/rest/contact/get

Question - How that path comes? 
Answer - NICUtil is my application name 
and 
Check web.xml
https://github.com/kvr2277/vinxplore/blob/master/NICUtil/src/main/webapp/WEB-INF/web.xml

<servlet-mapping>
<servlet-name>jersey-serlvet</servlet-name>
<url-pattern>/rest/*</url-pattern>
</servlet-mapping>

and in service class - JSONService.java
@Path("contact")
@Path("/get")


Your problem:
1. Call one rest service (A)
2. From A call one more rest service (B)
3. Get JSON (J) from B
4. But B is not available, so you want to mock B with the json u have

You need to do:
1. Either prepare a client using 
JerseyClientGet.java
or JerseyClientPost.java
2. Call a service similar to JSONService.java (lets call this A)
3. Now JSONService.java is your new intermediate client which has to call B
4. In JSONService's method
	public Business getTrackInJSON() {
		//write some commented code to call B
		//and get the response from B
		//return the JSON (you replace your sample JSON here and uncomment)
	}
	
	
	-----------
	
	1. Create VehicleTable.properties file with below data
Swift, Maruti, Car, 7 lakhs
Dost, Ashok Leyland, Truck, 45 lakhs
Discover, Baja, Bike, .6 lakhs
Camry, Toyota, Car, 22 lakhs

First one is vehicle name
Second one is vehicle maker
Third - vehicle type
Fourth - Price 

2. Create TyresAndSeatsTable.properties file with below data
Car – 4, 5
Truck – 6, 3
Bike – 2, 2

First one is number of tyres
Second one is seating capacity


3. Create interface – Vehicle – with methods both having integer return types – numberOfTyres(), seatingCapacity()
4.Create 3 classes – Car, Truck, Bike  each implementing Vehicle
   While writing implementation of classes, read from TyresAndSeatsTable.properties file and return numberOfTyres and seatingCapacity


5. Prepare a class Vehicle - with methods getType(String vehicleName), getMaker(String vehicleName), getPrice(String vehicleName)  - all returning Strings
 - based on vehicleName, required value for each method should be fetched from VehicleTable.properties


6. In your main class -
Read input from Request.properties file
Request.properties should have:
Swift
Dicover
Camry
Dost


7. Using Vehcile class' getType(String vehicleName) - prepare respective object of Car or Truck or Bike
and then get the numberOfTyres and seatingCapacity - using these objects

8. Finally write the response to a new properties file (Response.properties) like below:
Swift - Maruti, Car, 7 lakhs, 4 tyres, 5 seating capacity
Discover - Baja, Bike, .6 lakhs, 2 tyres, 2 seating capacity
Camry - Toyota, Car, 22 lakhs, 4 tyres, 5 seating capacity
Dost - Ashok Leyland, Truck, 45 lakhs, 6 tyres, 3 seating capacity
